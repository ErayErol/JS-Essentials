===================== ISVALID DATE
var isValidDate = DateTime.TryParseExact(bookXml.PublishedOn, "MM/dd/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var publishedOn);
===================== ISVALID DATE NULLABE
var isValidDate = DateTime.TryParseExact(prisonerJson.ReleaseDate, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var releaseDate);
ReleaseDate = isValidReleaseDate ? releaseDate : (DateTime?)null,
===================== ISVALID ENUM
var isValidEnum = Enum.TryParse(typeof(PurchaseType), purchaseXml.Type, out var type);
===================== DECIMAL ATTRIBUTE
[Range(typeof(decimal), "0.00", "79228162514264337593543950335")]




1. Model Definition
== COPY / PASTE
== NULLABE
== Initialize collections (in ctor)
== Validation	====>	Only valid for Database level
== Add DbSet	(view diagram for names)	====>	public virtual DbSet<Card> Cards { get; set; }
== Add Composite Key	====>	model.Entity<GameTag>().HasKey(table => new { table.GameId, table.TagId });




2.Import ====> Direct add to context
===== XML Deserialization

var books = XmlConverter.Deserializer<BookXmlInputModel>(xmlString, "Books");
var sb = new StringBuilder();

var result = sb.ToString().TrimEnd();
return result;

=========XML DTO
Convert XML to C# Classes
Validations		====>	All Valid for C# EF Core level
XmlArray	====>		Property have to be Array - not List or ICollection ....



===== JSON Deserialization
var users = JsonConvert.DeserializeObject<JSONUser[]>(jsonString);
var sb = new StringBuilder();

if (IsValid(jsonUser) == false || jsonUser.Cards.All(IsValid) == false)
    {
        sb.AppendLine("Invalid Data");
        continue;
    }
	
context.Users.Add(user);
context.SaveChanges();

sb.AppendLine($"Imported {user.Username} with {user.Cards.Count} cards");

var result = sb.ToString().TrimEnd();
return result;

===== JSON DTO
=====>> JSON is 90% string  || 3% int || 3% decimal || 3% array


=====>>>>  string[] Tags
"Tags": [
	"Single-player",
	"Multi-player",
	"Co-op",
	"Steam Achievements",
	"Partial Controller Support",
	"Stats"
]

=====================================================

=====>>>>  CardJSON[] Cards

public class CardJSON
    {
        [Required]
        public string Number { get; set; }

        [Required]
        public string CVC { get; set; }

        public int Type { get; set; }
    }

"Cards": [
	{
		"Number": "1111 1111 1111 1111",
		"CVC": "111",
		"Type": "Debit"
	}
]






=========== OnDelete
FK_OfficersPrisoners_Officers_OfficerId
	builder.Entity<Officer>()
	.HasMany(x => x.OfficerPrisoners)
	.WithOne(x => x.Officer)
	.OnDelete(DeleteBehavior.Restrict);